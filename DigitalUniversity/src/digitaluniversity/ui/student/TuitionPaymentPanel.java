/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 * @author priyankavadivel
 * @author vedanarayananshrirangesh
 * @author rg
 */

package digitaluniversity.ui.student;

import java.awt.CardLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import model.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author vedanarayananshrirangesh
 */
public class TuitionPaymentPanel extends javax.swing.JPanel {

    private List<TuitionInvoice> studentInvoices;
    private Student currentStudent;

    /**
     * Creates new form TuitionPaymentPanel
     */
    public TuitionPaymentPanel() {
        initComponents();
        configureTable();

        // Reload each time the panel is shown
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                loadInvoices();
                refreshUI();
            }
        });
    }

    private JPanel getRoot() {
        return (JPanel) this.getClientProperty("root");
    }

    private Business getBusiness() {
        return (Business) this.getClientProperty("business");
    }

    private UserAccount getAccount() {
        return (UserAccount) this.getClientProperty("account");
    }

    private void configureTable() {
        // Initialize non-editable table for invoices
        // with invoice ID, term, amount, status, etc.
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"Invoice ID", "Term", "Amount", "Status", "Date Paid"}
        ) {
            @Override
            public boolean isCellEditable(int r, int c) {
                return false;
            }
        };
        tblPayment.setModel(model);
    }

    private void loadInvoices() {
        // Fetch all invoices for the logged-in student
        // via business layer
        if (getBusiness() == null || getAccount() == null) {
            return;
        }
        currentStudent = getBusiness().getStudentById(getAccount().getPersonId());
        if (currentStudent == null) {
            return;
        }
        studentInvoices = getBusiness().getInvoicesByStudent(currentStudent);
    }

    private void refreshUI() {
        // Refresh table with latest invoice status
        // calculate total unpaid balance and update labels
        DefaultTableModel model = (DefaultTableModel) tblPayment.getModel();
        model.setRowCount(0);

        double totalDue = 0.0;
        boolean anyUnpaid = false;

        if (studentInvoices != null && !studentInvoices.isEmpty()) {
            for (TuitionInvoice inv : studentInvoices) {
                String term = inv.getTerm();
                double amount = inv.getOriginalAmount();
                boolean paid = inv.isPaid();
                String paidDate = (inv.getPaidDate() == null) ? ""
                        : inv.getPaidDate().format(DateTimeFormatter.ISO_DATE);

                model.addRow(new Object[]{
                    inv.getId(),
                    term,
                    String.format("$%.2f", amount),
                    paid ? "PAID" : "UNPAID",
                    paidDate
                });

                if (!paid) {
                    totalDue += inv.getAmountDue();
                    anyUnpaid = true;
                }
            }
        }

        lblAmountDue.setText(String.format("Amount Due: $%.2f", totalDue));
        lblPaymentStatus.setText("Payment Status: " + (anyUnpaid ? "UNPAID" : "PAID"));
        btnPayTution.setEnabled(anyUnpaid && totalDue > 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTutionAndBilling = new javax.swing.JLabel();
        lblAmountDue = new javax.swing.JLabel();
        lblPaymentStatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPayment = new javax.swing.JTable();
        btnPayTution = new javax.swing.JButton();
        btnViewHistory = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTutionAndBilling.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTutionAndBilling.setText("Tuition & Billing ");

        lblAmountDue.setText("Amount Due: ");

        lblPaymentStatus.setText("Payment Status:");

        tblPayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                " Course ID", "Course Name", "Amount ", "Status", "Date Paid"
            }
        ));
        jScrollPane1.setViewportView(tblPayment);

        jScrollPane2.setViewportView(jScrollPane1);

        btnPayTution.setBackground(new java.awt.Color(153, 204, 255));
        btnPayTution.setText("Pay Tuition");
        btnPayTution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayTutionActionPerformed(evt);
            }
        });

        btnViewHistory.setText(" View History");
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(btnPayTution)
                        .addGap(30, 30, 30)
                        .addComponent(btnViewHistory))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(100, 100, 100)
                                .addComponent(lblTutionAndBilling))
                            .addComponent(lblPaymentStatus)
                            .addComponent(lblAmountDue)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTutionAndBilling)
                    .addComponent(btnBack))
                .addGap(26, 26, 26)
                .addComponent(lblAmountDue)
                .addGap(18, 18, 18)
                .addComponent(lblPaymentStatus)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPayTution)
                    .addComponent(btnViewHistory))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
     // Show only paid invoices in a readable popup history
    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        if (studentInvoices == null || studentInvoices.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No payment history available.");
            return;
        }

        StringBuilder sb = new StringBuilder("Payment History:\n\n");
        for (TuitionInvoice inv : studentInvoices) {
            if (inv.isPaid()) {
                sb.append(String.format("Term: %-12s  Amount: $%.2f  Paid on: %s\n",
                        inv.getTerm(), inv.getOriginalAmount(),
                        inv.getPaidDate() != null ? inv.getPaidDate().format(DateTimeFormatter.ISO_DATE) : "-"));
            }
        }

        if (sb.toString().trim().equals("Payment History:")) {
            JOptionPane.showMessageDialog(this, "No completed payments yet.");
        } else {
            JOptionPane.showMessageDialog(this, sb.toString());
        }
    }//GEN-LAST:event_btnViewHistoryActionPerformed
    // Confirm and mark all unpaid invoices as paid
    // then refresh UI to reflect status
    private void btnPayTutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayTutionActionPerformed
        if (studentInvoices == null || studentInvoices.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No outstanding invoices.");
            return;
        }

        double totalDue = 0.0;
        for (TuitionInvoice inv : studentInvoices) {
            if (!inv.isPaid()) {
                totalDue += inv.getOriginalAmount();
            }
        }

        if (totalDue == 0.0) {
            JOptionPane.showMessageDialog(this, "All invoices are already paid.");
            return;
        }

        int res = JOptionPane.showConfirmDialog(
                this,
                String.format("Confirm payment of total $%.2f?", totalDue),
                "Confirm Payment",
                JOptionPane.YES_NO_OPTION
        );

        if (res == JOptionPane.YES_OPTION) {
            for (TuitionInvoice inv : studentInvoices) {
                if (!inv.isPaid()) {
                    inv.pay(); // calls setPaid(true) & sets paidDate inside model
                }
            }
            JOptionPane.showMessageDialog(this, "Payment successful!");
            refreshUI();
        }
    }//GEN-LAST:event_btnPayTutionActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        ((CardLayout) getRoot().getLayout()).previous(getRoot());
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPayTution;
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAmountDue;
    private javax.swing.JLabel lblPaymentStatus;
    private javax.swing.JLabel lblTutionAndBilling;
    private javax.swing.JTable tblPayment;
    // End of variables declaration//GEN-END:variables
}
