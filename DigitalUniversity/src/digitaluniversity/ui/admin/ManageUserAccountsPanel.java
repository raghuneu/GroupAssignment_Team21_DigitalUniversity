/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package digitaluniversity.ui.admin;

import java.awt.CardLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.Admin;
import model.Business;
import model.Faculty;
import model.Role;
import model.Student;
import model.UserAccount;

/**
 *
 * @author priyankavadivel
 */
/**
 *
 * Admin can perform CRUD operations on Admin, Faculty, and Student accounts.
 */
public class ManageUserAccountsPanel extends javax.swing.JPanel {

    private JPanel getRoot() {
        return (JPanel) this.getClientProperty("root");
    }

    private Business getBusiness() {
        return (Business) this.getClientProperty("business");
    }

    public ManageUserAccountsPanel() {
        initComponents();

        tblUsers.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblUsers.getSelectedRow();
                if (row >= 0) {
                    populateFieldsFromTable(row);
                }
            }
        });
        // Refresh the table whenever the panel becomes visible
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                SwingUtilities.invokeLater(() -> refreshTable());
            }
        });
    }

    /**
     * Populates the input fields with user details from the selected row in the
     * user table.
     */
    private void populateFieldsFromTable(int row) {
        if (getBusiness() == null) {
            return;
        }

        String name = tblUsers.getValueAt(row, 1).toString();
        String email = tblUsers.getValueAt(row, 2).toString();
        String username = tblUsers.getValueAt(row, 3).toString();
        String role = tblUsers.getValueAt(row, 4).toString();

        fieldName.setText(name);
        fieldEmail.setText(email);
        fieldUsername.setText(username);
        fieldPassword.setText("");

        // Normalize to match dropdown case ("Admin", "Faculty", "Student")
        if (role.equalsIgnoreCase("ADMIN")) {
            cmbRole.setSelectedItem("Admin");
        } else if (role.equalsIgnoreCase("FACULTY")) {
            cmbRole.setSelectedItem("Faculty");
        } else if (role.equalsIgnoreCase("STUDENT")) {
            cmbRole.setSelectedItem("Student");
        }
    }

    void refreshTable() {
        if (getBusiness() == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
        model.setRowCount(0);

        for (UserAccount ua : getBusiness().getAccounts().list()) {
            String name = "", email = "";
            if (ua.getRole() == Role.ADMIN) {
                Admin a = getBusiness().getAdminById(ua.getPersonId());
                if (a != null) {
                    name = a.getName();
                    email = a.getEmail();
                }
            } else if (ua.getRole() == Role.FACULTY) {
                Faculty f = getBusiness().getFacultyById(ua.getPersonId());
                if (f != null) {
                    name = f.getName();
                    email = f.getEmail();
                }
            } else {
                Student s = getBusiness().getStudentById(ua.getPersonId());
                if (s != null) {
                    name = s.getName();
                    email = s.getEmail();
                }
            }
            model.addRow(new Object[]{ua.getPersonId(), name, email, ua.getUsername(), ua.getRole(), ua.isActive() ? "Active" : "Inactive"});
        }

        if (model.getRowCount() > 0) {
            tblUsers.setRowSelectionInterval(0, 0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        lbltitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        fieldUsername = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox<>();
        fieldPassword = new javax.swing.JPasswordField();
        btnSearch = new javax.swing.JButton();
        fieldSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Username", "Role", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setResizable(false);
            tblUsers.getColumnModel().getColumn(1).setResizable(false);
            tblUsers.getColumnModel().getColumn(2).setResizable(false);
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
            tblUsers.getColumnModel().getColumn(4).setResizable(false);
            tblUsers.getColumnModel().getColumn(5).setResizable(false);
        }

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnModify.setBackground(new java.awt.Color(153, 204, 255));
        btnModify.setText("Modify");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        lbltitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lbltitle.setText("User Account Management");

        lblName.setText("Name");

        lblEmail.setText("Email");

        lblUsername.setText("Username");

        lblPassword.setText("Password");

        lblRole.setText("Role");

        fieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNameActionPerformed(evt);
            }
        });

        fieldEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldEmailActionPerformed(evt);
            }
        });

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Faculty", "Student" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblSearch.setText("Search by Name");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(67, 67, 67)
                        .addComponent(lbltitle))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblUsername)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblEmail)
                                                .addComponent(lblName))
                                            .addGap(11, 11, 11))
                                        .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(lblRole)))
                                    .addGap(24, 24, 24)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnModify)
                                    .addGap(18, 18, 18)
                                    .addComponent(btndelete)))
                            .addGap(239, 239, 239))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbltitle)
                    .addComponent(btnBack))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(fieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(fieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnModify)
                    .addComponent(btndelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if (getBusiness() == null) {
            return;
        }
        String name = fieldName.getText().trim();
        String email = fieldEmail.getText().trim();
        String username = fieldUsername.getText().trim();
        String password = new String(fieldPassword.getPassword());
        Role role = Role.valueOf(cmbRole.getSelectedItem().toString().toUpperCase());

        if (name.isEmpty() || email.isEmpty() || username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields required");
            return;
        }
        if (getBusiness().getAccounts().get(username) != null) {
            JOptionPane.showMessageDialog(this, "Username already exists");
            return;
        }

        switch (role) {
            case ADMIN -> {
                Admin a = new Admin(name, email);
                getBusiness().addAdmin(a, username, password);
            }
            case FACULTY -> {
                Faculty f = new Faculty(name, email, "Dept");
                getBusiness().addFaculty(f, username, password);
            }
            case STUDENT -> {
                Student s = new Student(name, email, "Program");
                getBusiness().addStudent(s, username, password);
            }
        }

        refreshTable();
        clearFields();
        JOptionPane.showMessageDialog(this, "Account created successfully");
    }//GEN-LAST:event_btnCreateActionPerformed

    private void fieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNameActionPerformed

    private void fieldEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldEmailActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        if (getBusiness() == null) {
            return;
        }

        int row = tblUsers.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row");
            return;
        }

        // Table cols: 0=ID, 1=Name, 2=Email, 3=Username, 4=Role, 5=Status
        String username = tblUsers.getValueAt(row, 3).toString();
        UserAccount ua = getBusiness().getAccounts().get(username);
        if (ua == null) {
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Delete this user?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String personId = ua.getPersonId();
        switch (ua.getRole()) {
            case ADMIN -> {
                // remove from admins collection
                java.util.Iterator<Admin> it = getBusiness().getAdmins().iterator();
                while (it.hasNext()) {
                    if (it.next().getId().equals(personId)) {
                        it.remove();
                        break;
                    }
                }
            }
            case FACULTY ->
                getBusiness().deleteFacultyById(personId);
            case STUDENT ->
                getBusiness().deleteStudentById(personId);
        }

        // remove the login account entry
        getBusiness().getAccounts().remove(username);

        refreshTable();
        // clear fields
        fieldName.setText("");
        fieldEmail.setText("");
        fieldUsername.setText("");
        fieldPassword.setText("");
        JOptionPane.showMessageDialog(this, "User deleted successfully");
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        if (getBusiness() == null) {
            return;
        }

        int row = tblUsers.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row first");
            return;
        }

        String username = tblUsers.getValueAt(row, 3).toString();
        UserAccount ua = getBusiness().getAccounts().get(username);
        if (ua == null) {
            JOptionPane.showMessageDialog(this, "Account not found");
            return;
        }

        // Read new values
        String newName = fieldName.getText().trim();
        String newEmail = fieldEmail.getText().trim();
        String newPass = new String(fieldPassword.getPassword()).trim();
        String newRoleStr = cmbRole.getSelectedItem().toString().trim().toUpperCase();
        Role newRole = Role.valueOf(newRoleStr);

        if (newName.isEmpty() || newEmail.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and Email are required");
            return;
        }

        // Update password if provided
        if (!newPass.isEmpty()) {
            ua.setPassword(newPass);
        }

        Role oldRole = ua.getRole();
        String personId = ua.getPersonId();

        // Case 1: same role → just update the existing person
        if (oldRole == newRole) {
            switch (oldRole) {
                case ADMIN -> {
                    Admin a = getBusiness().getAdminById(personId);
                    if (a != null) {
                        a.setName(newName);
                        a.setEmail(newEmail);
                    }
                }
                case FACULTY -> {
                    Faculty f = getBusiness().getFacultyById(personId);
                    if (f != null) {
                        f.setName(newName);
                        f.setEmail(newEmail);
                    }
                }
                case STUDENT -> {
                    Student s = getBusiness().getStudentById(personId);
                    if (s != null) {
                        s.setName(newName);
                        s.setEmail(newEmail);
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "User details updated successfully");
            refreshTable();
            return;
        }

        // Case 2: Role changed → move the person to new role category
        // Remove old person
        switch (oldRole) {
            case ADMIN ->
                getBusiness().deleteAdminById(personId);
            case FACULTY ->
                getBusiness().deleteFacultyById(personId);
            case STUDENT ->
                getBusiness().deleteStudentById(personId);
        }

        // Create new person under new role
        switch (newRole) {
            case ADMIN -> {
                Admin a = new Admin(newName, newEmail);
                getBusiness().addAdmin(a, username, ua.getPassword());
                ua.setPersonId(a.getId());
                ua.setRole(Role.ADMIN);
            }
            case FACULTY -> {
                Faculty f = new Faculty(newName, newEmail, "Dept");
                getBusiness().addFaculty(f, username, ua.getPassword());
                ua.setPersonId(f.getId());
                ua.setRole(Role.FACULTY);
            }
            case STUDENT -> {
                Student s = new Student(newName, newEmail, "Program");
                getBusiness().addStudent(s, username, ua.getPassword());
                ua.setPersonId(s.getId());
                ua.setRole(Role.STUDENT);
            }
        }

        JOptionPane.showMessageDialog(this, "Role changed and user updated successfully");
        refreshTable();
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (getBusiness() == null) {
            return;
        }
        String q = fieldSearch.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
        model.setRowCount(0);

        for (UserAccount ua : getBusiness().getAccounts().list()) {
            String name = "", email = "";
            if (ua.getRole() == Role.ADMIN) {
                Admin a = getBusiness().getAdminById(ua.getPersonId());
                if (a != null) {
                    name = a.getName();
                    email = a.getEmail();
                }
            } else if (ua.getRole() == Role.FACULTY) {
                Faculty f = getBusiness().getFacultyById(ua.getPersonId());
                if (f != null) {
                    name = f.getName();
                    email = f.getEmail();
                }
            } else {
                Student s = getBusiness().getStudentById(ua.getPersonId());
                if (s != null) {
                    name = s.getName();
                    email = s.getEmail();
                }
            }

            if (name.toLowerCase().contains(q)) {
                model.addRow(new Object[]{ua.getPersonId(), name, email, ua.getUsername(), ua.getRole(), ua.isActive() ? "Active" : "Inactive"});
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        AdminWorkAreaPanel adminPanel = new AdminWorkAreaPanel();
        adminPanel.putClientProperty("business", getBusiness());
        adminPanel.putClientProperty("root", getRoot());
        getRoot().add("adminWorkArea", adminPanel);
        ((CardLayout) getRoot().getLayout()).show(getRoot(), "adminWorkArea");
    }//GEN-LAST:event_btnBackActionPerformed

    private void clearFields() {
        fieldName.setText("");
        fieldEmail.setText("");
        fieldUsername.setText("");
        fieldPassword.setText("");
        fieldSearch.setText("");
        cmbRole.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btndelete;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JTextField fieldName;
    private javax.swing.JPasswordField fieldPassword;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JTextField fieldUsername;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JTable tblUsers;
    // End of variables declaration//GEN-END:variables
}
